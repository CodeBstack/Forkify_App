"use strict";

require("core-js/modules/es.array.includes.js");

require("core-js/modules/web.immediate.js");

var model = _interopRequireWildcard(require("./model.js"));

var _recipeView = _interopRequireDefault(require("./views/recipeView.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

//importing everything from the model.js
//for polyfilling async/await - converting to an ES5 feature
// const recipeContainer = document.querySelector('.recipe'); // it has been repalced by #parentElement in recipeView.js
// https://forkify-api.herokuapp.com/v2 // Project API
///////////////////////////////////////
const controlRecipes = async function () {
  try {
    const id = window.location.hash.slice(1); //this is getting the hash of the Id universally, the slice removes the first character which is #

    console.log(id);
    if (!id) return;

    _recipeView.default.renderSpinner(); // 1) Loading Recipe


    await model.loadRecipe(id); // we are not storing bcus the loadRecipe is not returning anything
    // 2) Rendering recipe

    _recipeView.default.render(model.state.recipe); // render() is a method to render something
    // const recipeView = new recipeView(model.state.recipe); // we will do this assuming we didnt export we didnt create the new object from the recipeView module

  } catch (err) {
    alert(err);
  }
}; // controlRecipes();
//listening to the hashchange # and load from the search results to show recipe.


['hashchange', 'load'].forEach(ev => window.addEventListener(ev, controlRecipes));