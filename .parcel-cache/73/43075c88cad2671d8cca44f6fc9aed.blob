"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _icons = _interopRequireDefault(require("url:../../img/icons.svg"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Parcel 2
class View {
  _data;
  /**
   * Render the recieved object to the DOM
   * @param {Object | Object[]} data The data to be rendered (e.g recipe)
   * @param {boolean} [render = true] if false, create markup string instead of rendering the DOM
   * @returns {undefined | string} A markup string is returned if render = false
   * @this {Object} View instance
   * @author Samuel Sunmonu
   * @todo Finish the implementation
   */

  render(data) {
    let render = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    //public render method
    if (!data || Array.isArray(data) && data.length === 0) return this.renderError();
    this._data = data;

    const markup = this._generateMarkup();

    if (!render) return markup;

    this._clear();

    this._parentElement.insertAdjacentHTML('afterbegin', markup);
  } // Rendering data without it affecting the entire DOM


  update(data) {
    this._data = data;

    const newMarkup = this._generateMarkup(); // creates a new dom but its not really on our page


    const newDOM = document.createRange().createContextualFragment(newMarkup); // this gets the class of all the newly created dom and converts to an array

    const newElements = Array.from(newDOM.querySelectorAll('*')); // this gets the class of the initial dom and converts to and array

    const curElements = Array.from(this._parentElement.querySelectorAll('*')); // Array.from converts the NodeList to an array

    newElements.forEach((newEl, i) => {
      const curEl = curElements[i]; // console.log(curEl, newEl.isEqualNode(curEl));
      //Changing the TEXT

      if (!newEl.isEqualNode(curEl) && newEl.firstChild?.nodeValue.trim() !== '') {
        curEl.textContent = newEl.textContent;
      } // Changing the ATTRIBUTES - data-update-to


      if (!newEl.isEqualNode(curEl)) // console.log(Array.from(newEl.attributes));
        Array.from(newEl.attributes).forEach(attr => curEl.setAttribute(attr.name, attr.value));
    });
  }

  _clear() {
    this._parentElement.innerHTML = '';
  }

  renderSpinner() {
    const markup = `
      <div class="spinner">
        <svg>
          <use href="${_icons.default}#icon-loader"></use>
        </svg>
      </div>
      `;

    this._clear();

    this._parentElement.insertAdjacentHTML('afterbegin', markup);
  }

  renderError() {
    let message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._errorMessage;
    const markup = `
      <div class="error">
       <div>
          <svg>
            <use href="${_icons.default}#icon-alert-triangle"></use>
          </svg>
        </div>
        <p>${message}</p>
      </div> 
    `;

    this._clear();

    this._parentElement.insertAdjacentHTML('afterbegin', markup);
  }

  renderMessage() {
    let message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._message;
    const markup = `
      <div class="message">
       <div>
          <svg>
            <use href="${_icons.default}#icon-smile"></use>
          </svg>
        </div>
        <p>${message}</p>
      </div> 
    `;

    this._clear();

    this._parentElement.insertAdjacentHTML('afterbegin', markup);
  }

}

exports.default = View;